# -*- coding: utf-8 -*-
import string
import random
from voltage.flow import base
from voltage.fragment.userapp import travel, air, hotel
from voltage.fragment.userapp.trip import carRental
from voltage.fragment.userapp.flexair import flexair
from voltage.pages.travel.rearden import flexDatesInterstitialPage
from voltage.pages.travel.rearden import flexWeekendsInterstitialPage
from voltage.pages.travel.rearden import home

class Flow(base.Flow):
    
    def setup_defaults(self):
        self.airport2 = 'Los Angeles, CA, US (LAX)'
        self.airport1 = 'San Francisco, CA, US (SFO)'        
        self.airline = 'Delta Air Lines'
        self.primary_airport_code = 'SFO'
        self.primary_airport = 'San Francisco, CA, US (SFO)'
        self.alternate_airport_code = 'SMF'
        self.alternate_airport = 'Sacramento, CA, US (SMF)'
        self.air_search_by = None
        self.flex_choice_type = "fixedLocation"
        self.flex_choice_matrix = 1
        self.flex_choice_column = 1
        self.flex_choice_row = 1
        self.hotel_chain = "Marriott"
        self.match_hotel_search_with_air = True
        self.hotel_multi_guests = 1
        self.car_rental_agency = None
        self.p4p_conversion_rate = 1
        self.p4p_points_used = None
        self.cc_nickname = 'My Chase card'
        self.cc_last_four = '1111'
        self.cc_cid = '123'
        self.cc_exp_month = 'December';
        self.cc_exp_year = '2012';
        self.air_payment_card = None
        self.hotel_payment_card = None
        self.passenger_count = None
        self.air_fare_type = None;
        self.use_locator_widget = False;
        self.air_class_type = None;
        self.air_depart_time = None;
        self.air_arrival_time = None;
        self.match_car_search_with_air = True
        self.match_hotel_search_with_rail = True
        self.match_car_search_with_rail = True
        self.car_search_pickup_type = 'airport' 
        self.car_search_dropoff_type = 'airport' 
        self.car_search_from_page = 'tripplanner' 
        self.pickuplocation = self.airport1
        self.dropofflocation = self.airport2
        self.trip_months_in_future = 6
        self.trip_type = 'roundtrip'
        travel.generate_trip_name(self, self.browser)        
        self.rsdict = travel.setup_resource_bundle_default_values(self)      

    def setup_variables(self):
        pass
    
    ''' ----------------------------- Air Related Methods --------------------------------------'''
    
    def populate_airports(self):
        """
        1. Fill in the departure and arrival airports.
        """
        self.browser.type('id=fromAirport', self.airport1)
        self.browser.type('id=toAirport', self.airport2)
                
    def tripplanner_populate_air(self):
        """
        1. Fill in the departure and arrival airports.
        """  
        if(self.air_search_by == travel.get_string(self, "schedule") ):
            self.browser.click("searchByScheduleTab")
        if(self.air_search_by == 'FlexDates'):
            self.browser.click("//a[@id='searchByDateTab']")
            self.browser.wait_for_text(travel.get_string(self, "travelfrom"), self.config.max_wait)
        if(self.air_search_by == 'FlexWeekends'):
            self.browser.click("//a[@id='searchByDateTab']")
            self.browser.wait_for_text(travel.get_string(self, "travelfrom"), self.config.max_wait)
            self.browser.click('id=flexWeekendOption')
            self.browser.select('id=weekendSearchMonth', 'index=0')
        self.browser.click("showAirOptions0")       
        self.browser.wait_for_text(travel.get_string(self, "faretype"), self.config.max_wait)
        if not self.air_fare_type == None:
            self.browser.select('id=tripDelegateViewBean.travelerViewBeanList[0].tripMainViewBean.unrestrictedFares', "label=%s" % (self.air_fare_type))
        if (self.passenger_count != None and self.passenger_count > 1):            
            self.choose_multi_passengers(self.passenger_count)
        if not self.air_class_type == None:
            self.browser.select('id=classBoth0', "label=%s" % self.air_class_type)
            
        if self.use_locator_widget == True: 
            for city in ("departure", "destination"):
                if city == "departure":
                    self.browser.click('//*[@id="airDepartureCityLink0"]')
                    self.browser.wait_for_text("Enter an airport code", self.config.max_wait)
                    self.browser.type("//*[@id='lwSearchField']", self.airport1)
                else:
                    self.browser.click('//*[@id="airDestinationCityLink0"]')
                    self.browser.wait_for_text("Enter an airport code", self.config.max_wait)
                    self.browser.type("//*[@id='lwSearchField']", self.airport2)
            
                self.browser.click("//*[@id='lwSearchButton']")
                self.browser.is_element_present("//*[@id='lwLocItem_0']")
                self.browser.click("//*[@id='lwLocItem_0']")
                self.browser.click("css=#lwSelectButton")
        else: 
            self.browser.type('id=airDepartureCity0', self.airport1)
            self.browser.type('id=airDestinationCity0', self.airport2)

        self.browser.fire_event("id=airDestinationCity0", "blur")

        if(self.air_search_by != 'FlexWeekends'):
            self.walk_calendar_navigate_forward(self.trip_months_in_future)

        if(self.air_search_by == 'FlexDates'):
            travel.change_date_n_days(self, self.browser, 'airReturnDate0', 10)

        if not self.air_depart_time == None:
            self.browser.click('id=ttTimeAnchor0')
            self.browser.select('id=ttSelectInput0', "label=%s" % self.air_depart_time)

        if not self.air_arrival_time == None:
            self.browser.click('id=ttTimeAnchor1')
            self.browser.select('id=ttSelectInput1', "label=%s" % self.air_arrival_time)        
        ### Sc Added to avoid - No matching Flights Available. Free the timings to select more flights ###
        if self.browser.is_element_present("ttSelectInput0"):
            self.browser.select('id=ttSelectInput0', "value=00%24")
        if self.trip_type == "oneway": 
            return
        if self.browser.is_element_present("ttSelectInput1"):
            self.browser.select('id=ttSelectInput1', "value=00%24")
                    
    def verify_home(self):
        if self.config['rpa']['login_context'] == 'selfservice':            
            self.browser.wait_for_text(travel.get_string(self, "reservations"))
        elif (self.language =='en'): ##TODO handle with proper bundle values...
            self.browser.wait_for_text("Upcoming Reservations")
        else:
            self.browser.wait_for_text(travel.get_string(self, "signout"))
        self.current_page = home.HomePage(self, self.browser, self.config)
        self.current_page.verifyCorrectPage()
        
    def select_departing_flight(self):
        """
        5. Select the departing flight.
        """
        air.select_flight(self, self.browser)

    def select_return_flight(self):
        """
        6. Select return flight.
        """
        air.select_flight(self, self.browser)

    def select_flight(self):
        """
        Select the flight.
        """
        air.select_flight(self, self.browser)
        
    def change_change_flights(self):
        if not self.browser.is_checked("tripChangeOption"):
            self.browser.check("tripChangeOption")
            self.browser.fire_event("tripChangeOption", "click")
        if self.browser.is_element_present("tripDestinationOptionYes"):
            self.browser.check("tripDestinationOptionYes")
            self.browser.fire_event("tripDestinationOptionYes", "click")
        else:
            self.browser.check("name=tripModifyBean.keepSameDestCarrier value=same")
            self.browser.fire_event("name=tripModifyBean.keepSameDestCarrier value=same", "click")
        self.browser.wait_for_page_to_load(self.config.max_wait)
        if not self.browser.is_checked("changeAirOnly"):
            self.browser.check("changeAirOnly")
        self.browser.click("link=Continue")
        self.browser.wait_for_page_to_load(self.config.max_wait)

        self.browser.check("changeReturnFlightOnlyNo")
        self.browser.click("link=Continue")
        self.browser.wait_for_page_to_load(self.config.max_wait)

        self.browser.wait_for_text("You have chosen to change the following:")
        self.browser.click("link=Continue")
        self.browser.wait_for_page_to_load(self.config.max_wait)        
        
    def select_cancel_flight(self):
        self.browser.click("cancelAllFlight")

    def verify_air_search(self):        
        if(self.air_search_by == travel.get_string(self, "schedule") ): 
            self.browser.wait_for_text(travel.get_string(self, "completeflightselection"), self.config.max_wait)            
        else:
            self.browser.wait_for_text(travel.get_string(self, "airperperson"), self.config.max_wait) 
        
            
    def tripplanner_remove_air(self):
        if self.browser.is_element_present("includeTravelbyChk0"):
            if self.browser.is_checked("includeTravelbyChk0"):
                self.browser.click("includeTravelbyChk0")
        if self.browser.is_element_present("includeAirChk0"):
            if self.browser.is_checked("includeAirChk0"):
                self.browser.click("includeAirChk0")

    def tripplanner_deselect_air(self):
        if self.browser.is_checked('includeAirChk0'):
            self.browser.click("includeAirChk0") 
    
    def tripplanner_select_air(self):
        if not self.browser.is_checked('includeAirChk0'):
            self.browser.click("includeAirChk0") 
            
    def quickstart_deselect_air(self):
        if self.browser.is_element_present("addAirOrTrain") and self.browser.is_checked('addAirOrTrain'):
            self.browser.click("addAirOrTrain")
        elif self.browser.is_element_present("addAir") and self.browser.is_checked('addAir'):
            self.browser.click("addAir")
            
    ''' -------------------------------Hotel related Methods -------------------------------------'''

    def tripplanner_add_hotel(self):
        """
        Selects Hotel on the Trip Planner and populates the Hotel Search Criteria. 
        3. Select hotel for this purchase
        """
        if not self.browser.is_checked("includeHotelChk0"):
            self.browser.click('id=includeHotelChk0')
        hotel.populate_hotel_search(self,self.browser, 'airport', self.airport2)
        if self.browser.is_element_present("matchHotelDates0"):
            if self.match_hotel_search_with_air == True and not self.browser.is_checked("matchHotelDates0"):
                self.browser.check('id=matchHotelDates0')
            if self.match_hotel_search_with_air == False and self.browser.is_checked("matchHotelDates0"):
                self.browser.uncheck('id=matchHotelDates0')
        if self.browser.is_element_present("hotelGuests0"):
            self.browser.select("hotelGuests0", "label=%d" % self.hotel_multi_guests)
            
    def select_hotel(self):
        hotel.select_hotel(self, self.browser)

    def select_room(self):
        hotel.select_room(self, self.browser)                

    def change_add_hotel(self):
        self.browser.click("tripAddOption") # choose the "add" button
        self.browser.wait_for_page_to_load(self.config.max_wait)
        self.browser.wait_for_text(travel.get_string(self, "whatyouwouldliketoadd"), self.config.max_wait)        
        self.browser.click("addNewHotel")
        self.browser.click("buttonContinue")
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_change_add_hotel(self):
        self.browser.wait_for_text(travel.get_string(self, "changeyourtrip"), self.config.max_wait)  

    def select_change_add_hotel(self):
        self.browser.click("matchHotelLocation0")
        self.browser.click("buttonSearch")
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def select_hotel_tab(self):
        hotel.select_reserve_tab(self, self.browser)
        
    def select_cancel_hotel(self):
        self.browser.click("cancelHotel") 

    def verify_hotel_search(self):
        if self.browser.is_element_present("keepExistingDates"):
            self.browser.click("buttonContinue")
            self.browser.wait_for_page_to_load(self.config.max_wait)
        ### Sc used to avoid the problem rising out of French language
        if self.browser.is_text_present(travel.get_string(self, "pricedecreasealert")) or self.browser.is_text_present(travel.get_string(self, "priceincreasealert")):
            self.browser.click('buttonContinue')
                 
        self.browser.wait_for_text(travel.get_string(self, "selectyourhotel"), self.config.max_wait) 
        if self.browser.is_element_present("hotelWaitSort_c"):
            if self.browser.is_visible("hotelWaitSort_c"):
                self.browser.wait_for_layer_disappear("hotelWaitSort_c", self.config.max_wait)

    def verify_hotelroom_search(self):
        if self.browser.is_element_present("xpath=//span[contains(@class, \'hideRoomRates\')]"):
            # Live Search Enabled TODO           
            if (self.language == 'en'):
                self.browser.wait_for_text(travel.get_string(self, "roomratedetails"), self.config.max_wait) 
        else:
            self.browser.wait_for_text(travel.get_string(self, "hoteldetails"), self.config.max_wait)                                               
    
    def tripplanner_deselect_hotel(self):
        if self.browser.is_checked('includeHotelChk0'):
            self.browser.click("includeHotelChk0")

    def tripplanner_select_hotel(self):
        if not self.browser.is_checked('includeHotelChk0'):
            self.browser.click("includeHotelChk0")
            
    ''' -------------------------------------Car related methods ----------------------------------------------'''
 
    def tripplanner_add_car(self):
        """
        3.5 Select car for this purchase
        """
        if not self.browser.is_checked("includeCarChk0"):
            self.browser.click('id=includeCarChk0')

        if self.match_car_search_with_air == True and not self.browser.is_checked("matchCarDates0"):
            self.browser.check('id=matchCarDates0')
        if self.match_car_search_with_air == False and self.browser.is_checked("matchCarDates0"):
            self.browser.uncheck('id=matchCarDates0')

    def select_car(self):
        """
        9. Select car
        """
        if not self.car_rental_agency == None:
            if self.browser.is_text_present('Choose a pick-up location'):
                path_to_seek = "//ol[@id='carRentalProviderFilterOrderedList']/li"
                found = False
                count = int(self.browser.get_xpath_count(path_to_seek))
                for i in xrange(count):
                    path = "//ol[@id='carRentalProviderFilterOrderedList']/li[%d]/label" % (i+1)
                    value = self.browser.get_text(path)
                    if value == self.car_rental_agency:
                        found = True
                        break
                if found == True:
                    self.browser.click("//ol[@id='carRentalProviderFilterOrderedList']/li[%d]/span/input"%(i+1))
                    self.browser.wait_for_seconds(2)
                    self.browser.click("link=Select this location")
                    self.browser.wait_for_page_to_load(self.config.max_wait)

        if self.browser.is_element_present("reserve_1"):
            self.browser.click('link=Reserve')
        else:
            self.browser.click('link=Select')
        self.browser.wait_for_page_to_load(self.config.max_wait)
        travel.out_of_policy_explain(self, self.browser, 'Automation: out of policy ok')    
 
    def change_add_car(self):
        self.browser.click("tripAddOption") # choose the "add" button
        self.browser.wait_for_page_to_load(self.config.max_wait)
        self.browser.wait_for_text(travel.get_string(self, "whatyouwouldliketoadd")) 
        self.browser.click("addNewCar")
        self.browser.click("link=%s" % travel.get_string(self, "continue"))
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_change_add_car(self):
        self.browser.wait_for_text(travel.get_string(self, "changeyourtrip"), self.config.max_wait)

    def select_change_add_car(self):
        self.browser.click("buttonSearch")
        self.browser.wait_for_page_to_load(self.config.max_wait)
       
    def select_cancel_car(self):
      
        self.browser.click("cancelCar")        
    
    
    def verify_rentalcar_search(self):

        self.browser.wait_for_text('Choose a car') 

    def tripplanner_deselect_car(self):
        if self.browser.is_checked('includeCarChk0'):
            self.browser.click("includeCarChk0")

    def tripplanner_select_car(self):
        if not self.browser.is_checked('includeCarChk0'):
            self.browser.click("includeCarChk0")   

    def removeairhotel_addcar(self):
        if self.car_search_from_page == 'tripplanner':
            self.select_tripplanner()
            self.verify_tripplanner()
            self.tripplanner_remove_air()
            self.tripplanner_deselect_hotel()
        elif self.car_search_from_page == 'quickstart':
            self.quickstart_deselect_air()
            if self.browser.is_element_present("id=alignCar") and self.browser.is_checked("id=alignCar"):
                self.browser.click("id=alignCar")
        carRental.search_form_add_car(self, self.car_search_from_page)

    def populate_car_search(self):
        #Populate the fields        
        if self.car_search_from_page == 'tripplanner':
            carRental.populate_search_tripplanner(self, self.car_search_pickup_type, self.pickuplocation, self.car_search_pickup_type, self.dropofflocation)
        elif self.car_search_from_page == 'quickstart':
            carRental.populate_search_quickstart(self, self.car_search_pickup_type, self.pickuplocation, self.car_search_pickup_type, self.dropofflocation)
        carRental.walk_calendar(self, self.car_search_from_page, 4)

    def car_search(self):
        if self.car_search_from_page == 'quickstart':
            self.browser.click('id=SearchSubmit')
        else:
            self.browser.click('buttonSearch')
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_car_search(self):
        if not self.car_search_pickup_type == 'airport':
            carRental.verify_car_pickup_location_search(self)
        else:
            carRental.verify_car_rental_search(self)

    def select_pick_up_car_location(self):
        if not self.car_search_pickup_type == 'airport':
            carRental.select_car_location(self)

    def select_drop_off_car_location(self):
        if not self.car_search_dropoff_type == 'airport':
            carRental.select_car_location(self)

    def select_car_location(self):
        if not self.car_search_dropoff_type == 'airport':
            if self.pickuplocation != self.dropofflocation:
                self.select_pick_up_car_location()
                carRental.verify_car_dropoff_location_search(self)
                self.select_drop_off_car_location()
            else:
                self.select_pick_up_car_location()

    def verify_car_rental_search(self):
        carRental.verify_car_rental_search(self)

    def select_rental(self):
        carRental.select_car_rental(self)
        
    ''' ---------------------------------- Train related methods --------------------------------------------------'''    

    def walk_train_calendar_navigate_forward(self, months = 6):
        """
        Open the calendar widget and navigate forward for specified months.
        """
        self.browser.click('id=railDepartDate0Img')
        for i in xrange(months):
            self.browser.click('//table[@id="railDepartDate0_1"]/thead/tr/th/div/a')
        self.browser.click('//table[@id="railDepartDate0_1"]/tbody/tr[3]/td[4]/a')

    def walk_train_calendar_navigate_backward(self, months = 6):
        """
        Open the calendar widget and navigate forward for specified months.
        """
        self.browser.click('id=railDepartDate0Img')
        for i in xrange(months):
#            self.browser.click('//table[@id="departDate_1"]/thead/tr/th/div/a')
            self.browser.click('//table[@id="railDepartDate0_0"]/thead/tr/th/div/a')
        self.browser.click('//table[@id="railDepartDate0_1"]/tbody/tr[3]/td[4]/a')
                                    
    ''' ---------------------------------- Generic Travel related functions ---------------------------------------'''    
    def navigate_to_details(self):
        if (self.language == 'en'):
            self.browser.click("mainNavTabHome")  
            ##self.browser.wait_for_text("page 1 of")
        elif (self.language == 'fr'):
            self.browser.wait_for_seconds(15)   ## TODO Handle with fc bundle words
            self.browser.click("mainNavTabAccueil")            
            self.browser.wait_for_text("page 1 de")
        self.verify_home()
        travel.navigate_to_details(self, self.browser, self.trip_name)

    def walk_calendar_navigate_forward(self, months = 6):
        """
        Open the calendar widget and navigate forward for specified months.
        """
        self.browser.click('id=airDepartDate0Img')
        for i in xrange(months):
            self.browser.click('//table[@id="airDepartDate0_1"]/thead/tr/th/div/a')
        self.browser.click('//table[@id="airDepartDate0_1"]/tbody/tr[3]/td[4]/a')  
        if self.trip_type == 'roundtrip':   
            travel.change_date_n_days(self, self.browser, 'airReturnDate0', random.randint(0, 20))

    def walk_calendar_6_months_out(self):
        """
        This method is deprecated. Use 'walk_calendar_navigate_forward' method instead.
        2. Open the calendar widget and navigate forward 6 months.
        """
        self.walk_calendar_navigate_forward(6)

    def choose_multi_passengers(self, max):
        #Can choose up to the max number of passengers. If max not available in the option,
        #it will choose the largest available number of passengers.
        #Assuming we are Trip Planner page
        self.browser.click("showAirOptions0")
        field = 'tripDelegateViewBean.travelerViewBeanList[0].multiSegmentsViewBean.multiSegmentsViewBeanList[0].airOptionalViewBean.passengers'
        if(self.browser.is_element_present(field)):
            available_multi_passengers = self.browser.get_text(field).rsplit(' ').pop()
        if available_multi_passengers >= max:
            self.browser.select("passengers", "label=%s" % max)
            self.passenger_count = max
        else:
            self.browser.select("passengers", "label=%s" % available_multi_passengers)
            self.passenger_count = available_multi_passengers

    def change_1(self):
        self.browser.click("link="+ travel.get_string(self, "changethistrip") )      
        self.verify_change_1()

    def verify_change_1(self):
        self.browser.wait_for_text(travel.get_string(self, "changetripassistant"), self.config.max_wait)

    def hold_trip(self):
        ## TRVL-2662 Bug (After fix Remove this)
        self.browser.wait_for_text("Hold this trip", self.config.max_wait)   
        self.browser.click("buttonHold")
        self.browser.wait_for_text("Hold This Trip", self.config.max_wait)
        #self.browser.wait_for_text(travel.get_string(self, "holdthistrip"), self.config.max_wait)    
        #self.browser.click("buttonHold")
        #self.browser.wait_for_text(travel.get_string(self,"travelbookandhold"), self.config.max_wait)       

    def verify_hold(self):
        #self.browser.wait_for_text(travel.get_string(self,"travelbookandhold"), self.config.max_wait)
        self.browser.wait_for_text("Hold This Trip", self.config.max_wait)

    def hold_confirm(self):
        travel.trip_name(self, self.browser, self.trip_name)
        travel.trip_purpose(self, self.browser, 'some purpose')
        travel.passenger_gender(self, self.browser)
        self.browser.click("ackcheckbox")
        self.browser.click("link=" + travel.get_string(self, "continue") )       
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_hold_confirm(self):
        ## Not available in French language
        if (self.language == 'en'): 
            self.browser.wait_for_text("Your trip is on hold.")
        else:
            self.browser.wait_for_seconds(10)
        
        self.verify_confirmation()
        self.processId = self.browser.get_eval("this.browserbot.getCurrentWindow().document.getElementById('analyticsProcessId').innerHTML")
        
    def print_itinerary(self):
        self.browser.click("link=" + travel.get_string(self, "printitinerary"))        

    def verify_print_itinerary(self):
        self.browser.wait_for_text(self.trip_name)

    def hold_purchase(self):
        self.browser.click("link=" + travel.get_string(self, "modifyorpurchase"))
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def change_post_purchase(self):
        self.browser.click("link=" + travel.get_string(self, "changethistrip"))
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_change_post_purchase(self):
        self.browser.wait_for_text(travel.get_string(self, "changetripassistant"), self.config.max_wait)
     
    def change_change_destination(self):
        if not self.browser.is_checked("tripChangeOption"):
            self.browser.check("tripChangeOption")
            self.browser.fire_event("tripChangeOption", "click")
            self.select_continue_button()
        
        if self.browser.is_element_present("tripDestinationOptionNo"):
            self.browser.check("tripDestinationOptionNo")
            self.browser.fire_event("tripDestinationOptionNo", "click")
        else:
            self.browser.check("name=tripModifyBean.changeAirSyncAll")
            #self.browser.check("name=tripModifyBean.keepSameDestCarrier value=diff")
            #self.browser.fire_event("name=tripModifyBean.keepSameDestCarrier value=diff", "click")
            self.browser.click("link=Continue")
        self.browser.wait_for_page_to_load(self.config.max_wait)
    'added to support for new post change flow  '
    def change_return_portion(self):
        if  self.browser.is_text_present("Will your airline change only involve the return portion of your trip?"):
            if self.change_return_only:
               self.browser.click("id=changeReturnFlightOnlyYes")
            else:
             self.browser.click("id=changeReturnFlightOnlyNo")
        

    def verify_change(self):        
        self.browser.wait_for_text(travel.get_string(self, "changeyourtrip"), self.config.max_wait)

    def select_change_flights(self):
        self.browser.click("buttonSearch")
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def compare_to_original(self):
        self.browser.click("link=Compare to original")
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_compare(self):
        self.browser.wait_for_text("Compare to original")

    def navigate_compare_to_review(self):
        self.browser.click("link=Back to Trip Review page")
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def select_traveltab_hotel(self):
        self.browser.click("mainNavMenuItemTravel3")
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_option_change_and_cancel(self):
        self.browser.is_element_present("tripChangeOption")
        self.browser.is_element_present("tripCancelOption")

    def select_change(self):
        self.browser.click("tripChangeOption")        
        #self.browser.wait_for_text(travel.get_string(self, "sameorigindestination"), self.config.max_wait)

    def select_cancel(self):
        self.browser.click("tripCancelOption")
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_partial_cancel_options(self):
        ## TODO  Not present in any of the bundles 
        if (self.language =='en'):
            self.browser.wait_for_text('Which items would you like to cancel?')
        self.browser.is_element_present("cancelAllFlight")
        self.browser.is_element_present("cancelHotel")
        self.browser.is_element_present("cancelCar")

    def verify_keepSameOriginDest(self):        
        self.browser.wait_for_text(travel.get_string(self, "sameorigindestination"), self.config.max_wait)

    def select_change_sameorigindest(self):
        self.browser.click("tripDestinationOptionYes")        
        self.browser.wait_for_text(travel.get_string(self, "whatyouwouldliketochange"), self.config.max_wait)

    def select_continue_button(self):
        ##Sc added 
        if self.browser.is_element_present("//a[@id='buttonContinue']/span"):
            self.browser.focus("//a[@id='buttonContinue']/span")
            self.browser.highlight("//a[@id='buttonContinue']/span")
            self.browser.click("//a[@id='buttonContinue']/span")
            self.browser.wait_for_page_to_load(self.config.max_wait)

    def select_confirm_cancel(self):
        if self.browser.is_element_present("ackcheckbox"):
            self.browser.click("ackcheckbox")
        self.browser.click('buttonConfirmCancelRequest')
        self.browser.wait_for_page_to_load(self.config.max_wait)
        
    def verify_tripplanner(self): 
        self.browser.wait_for_text(travel.get_string(self, "tripplanner"), self.config.max_wait)   

    def verify_review(self):
        self.browser.wait_for_text(travel.get_string(self, "reviewyourtrip"), self.config.max_wait)   
        

    def verify_purchase_page(self):
        if (self.language == 'en'):       
            self.browser.wait_for_text(travel.get_string(self, "purchasetrip"), self.config.max_wait)
        else:
            self.browser.wait_for_seconds(15)
            
    def verify_confirmation(self):        
        self.browser.wait_for_text(travel.get_string(self, "tripconfirmation"), self.config.max_wait)         
 
    def verify_details(self):
        self.browser.wait_for_text(travel.get_string(self, "tripdetails"), self.config.max_wait)
        
    def select_tripplanner(self):
        """
        Navigate to the trip planner page.
        """
        ## TODO sc - Ids are also changed mainNavMenuItemVoyage1   mainNavMenuItemTravel1
        language = travel.get_language(self)
        if (language == 'fr'):
            self.browser.click("mainNavMenuItemVoyage1")
        else:
            self.browser.click("mainNavMenuItemTravel1")
        self.browser.wait_for_page_to_load(self.config.max_wait) 

    def verify_roundtrip(self):
        if self.browser.is_element_present("link=Round Trip"):
            self.browser.click("link=Round Trip")
            self.browser.wait_for_text("Round Trip", self.config.max_wait)
            self.browser.is_text_present("Round Trip")
               
    def search(self):
        """
        Perform search.
        """
        self.browser.click('buttonSearch')
        self.browser.wait_for_page_to_load(self.config.max_wait)
        
    def review_trip(self):
        """
        Review the trip
        """
        travel.out_of_policy_explain(self.test, self.browser, 'Automation: out of policy ok')        
        if self.browser.is_element_present("name=travelDelegate.airPageBean.workspaceView.selectedPolicyReason"):
            self.browser.select("name=travelDelegate.airPageBean.workspaceView.selectedPolicyReason","index=1")           
        """ Sc added on 4-21-11, to manage Car Reasons Policy. 2. In French one word is missed.So, used a hard coded time  """
        self.browser.wait_for_seconds(15)
        if self.browser.is_element_present("name=travelDelegate.reviewPageBean.tripReviewBean.carTravelPolicyStateImpl.selectedPolicyReason"):
            self.browser.select("name=travelDelegate.reviewPageBean.tripReviewBean.carTravelPolicyStateImpl.selectedPolicyReason","index=0")
        """ Sc Hotel Room Policy Reason fix """
        if self.browser.is_element_present("name=travelDelegate.roomPageBean.workspaceView.selectedPolicyReason"):
            self.browser.select("name=travelDelegate.roomPageBean.workspaceView.selectedPolicyReason","index=1")        
        if self.browser.is_element_present("id=buttonContinue"):
            self.browser.click("id=buttonContinue")
        self.browser.wait_for_page_to_load(self.config.max_wait)

            
    def purchase_trip(self):
        """
        Purchase trip.
        """
        if self.browser.is_text_present(travel.get_string(self, "tripacknowledgewhencancelreservation")): 
            self.browser.check("//input[@id='ackcheckboxTrain']")            
        if self.browser.is_text_present("Verification Code"):
            if not self.browser.is_text_present("airline"):
                self.browser.type("//input[@id='travelDelegate.reviewPageBean.tripReviewBeanList[0].purchaseInfoBean.railBillingInfoBean.cvv']", "1111")
            else:
                self.browser.type("//input[@id='travelDelegate.reviewPageBean.tripReviewBeanList[0].purchaseInfoBean.airBillingInfoBean.cvv']", "1111")

        if self.browser.is_text_present("Number of bags to check"):
            self.browser.select("//select[@name='travelDelegate.reviewPageBean.tripReviewBeanList[0].purchaseInfoBean.ownerPassenger.numberOfBags']", "0")
        if self.browser.is_text_present(' I acknowledge and agree to the airlines terms and conditions.'):
            self.browser.click("//input=[@id='ackcheckbox']")        
 
        travel.trip_name(self, self.browser, self.trip_name)
        travel.trip_purpose(self, self.browser, 'Some purpose')

        if self.passenger_count != None and self.passenger_count > 1:
            extra_passenger_count = self.passenger_count - 1
            first_name_list = ("Jonathan", "Josh", "Larry", "Micheal", "Michelle")
            last_name_list = ("Smith", "Johnson", "Williams")
            for i in xrange(extra_passenger_count):
                
                first_name_input_name = "name=travelDelegate.reviewPageBean.tripReviewBeanList[0].purchaseInfoBean.firstName_%d" % (i)
                last_name_input_name = "name=travelDelegate.reviewPageBean.tripReviewBeanList[0].purchaseInfoBean.lastName_%d" % (i)
                self.browser.type(first_name_input_name, '%s' % (random.choice(first_name_list)))
                self.browser.type(last_name_input_name, '%s' % (random.choice(last_name_list)))
                #Date of birth

                month_locator = "id=travelDelegate_reviewPageBean_tripReviewBeanList_0__purchaseInfoBean_dob_%d_month" % (i)
                day_locator = "id=travelDelegate_reviewPageBean_tripReviewBeanList_0__purchaseInfoBean_dob_%d_day" % (i)
                year_locator = "id=travelDelegate_reviewPageBean_tripReviewBeanList_0__purchaseInfoBean_dob_%d_year" % (i)

                if self.browser.is_element_present(month_locator) and self.browser.get_value(month_locator) == "-":
                    value = self.browser.get_select_options(month_locator)[2]
                    self.browser.select(month_locator, 'label=' + value)

                if self.browser.is_element_present(day_locator) and self.browser.get_value(day_locator) == "-":
                    value = self.browser.get_select_options(day_locator)[2]
                    self.browser.select(day_locator, 'label=' + value)

                if self.browser.is_element_present(year_locator) and self.browser.get_value(year_locator) == "-":
                    value = self.browser.get_select_options(year_locator)[20]
                    self.browser.select(year_locator, 'label=' + value)

                #gender
                gender_locator = "name=travelDelegate.reviewPageBean.tripReviewBeanList[0].purchaseInfoBean.gender_%d" % (i)
                if self.browser.is_element_present(gender_locator) and self.browser.get_value(gender_locator) == "":
                    value = self.browser.get_select_options(gender_locator)[1]
                    self.browser.select(gender_locator, 'label=' + value)


        if self.browser.is_element_present("TestP4P_card_cid"):
            self.browser.type("TestP4P_card_cid", self.cc_cid)
        if self.browser.is_element_present("TestP4P_card_expiry_month"):
            self.browser.select("TestP4P_card_expiry_month", "label=%s" % (self.cc_exp_month))
        if self.browser.is_element_present("TestP4P_card_expiry_year"):
            self.browser.select("TestP4P_card_expiry_year", "label=%s" % (self.cc_exp_year))

        if self.browser.is_element_present("airBilling1") and not self.air_payment_card == None:
            self.browser.select("airBilling1", "label=%s" % (self.air_payment_card))

        if self.browser.is_element_present("hotelBilling1") and not self.hotel_payment_card == None:
            self.browser.select("hotelBilling1", "label=%s" % (self.hotel_payment_card))

            
        if (self.language == 'en'):
            # the following are config fields
            if self.browser.is_element_present("cfCollectionsField00"):               
                self.browser.check("cfCollectionsField00")          
            if self.browser.is_element_present("cfCollectionsField10"):
                first_option = "Relocation"
                self.browser.select("cfCollectionsField10", "label=%s" % (first_option))
            if self.browser.is_element_present("cfCollectionsField40"):
                first_option = "PERSONAL PREFERENCE"
                self.browser.select("cfCollectionsField40", "label=%s" % (first_option))
            if self.browser.is_element_present("name=businessInfo.departmentId"):
                self.browser.type("name=businessInfo.departmentId", "Test business unit")
            if self.browser.is_element_present("cfCollectionsField30"):
                self.browser.check("cfCollectionsField30")
        # Handle French separately                 
        elif (self.language == 'fr'):
            if self.browser.is_element_present("cfCollectionsField10"):                
                self.browser.select("id=cfCollectionsField10", "value=RELO")
            if self.browser.is_element_present("cfCollectionsField00"):                
                self.browser.check("cfCollectionsField00")
            if self.browser.is_element_present("cfCollectionsField30"):
                self.browser.check("cfCollectionsField30")
            if self.browser.is_element_present("cfCollectionsField40"):
                self.browser.select("id=cfCollectionsField40", "value=HF")
        
        travel.passenger_info(self, self.browser)
        
        if self.browser.is_element_present("id=buttonContinue"):            
            self.browser.click("id=buttonContinue")
            self.browser.wait_for_page_to_load(self.config.max_wait)            

        travel.purchase(self, self.browser) 

    def handle_quickbuy(self):
        """
        Handle quickbuy
        """
        travel.quickbuy_no(self, self.browser)

    def handle_price_alert(self):
        travel.handle_price_alert(self, self.browser)

    def cancel_from_details(self):
        ##self.browser.click("xpath=//div[@id='resToolsContent']//li[2]//a") ## Sc Added to click cancel this trip link        
        self.browser.click("link=%s" % travel.get_string(self, "cancelthistrip"))
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_cancel(self):        
        self.browser.wait_for_text(travel.get_string(self, "canceltripassistant"), self.config.max_wait)
        
    def cancel_trip(self):
        if self.browser.is_element_present("ackcheckbox"):
            self.browser.click("ackcheckbox")        
        self.browser.click("buttonConfirmCancelRequest")
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_post_cancel(self):        
        self.browser.wait_for_text(travel.get_string(self, "thefollowingcanceledfor"), self.config.max_wait)
        
    def finish(self):
        """
        13. Wrap up and go back to the homepage
        """
        self.browser.click('link=' +travel.get_string(self, "signout"))
        
    def check_flex_dates(self):
        if (self.air_search_by == 'FlexDates'):
            self.verify_flex_dates_interstitial()
            self.select_flex_dates_interstitial()

        if (self.air_search_by == 'FlexWeekends'):
            self.verify_flex_weekends_interstitial()
            self.select_flex_weekends_interstitial()


    def verify_flex_dates_interstitial(self):
        self.browser.wait_for_text('Select dates')
        self.current_page = flexDatesInterstitialPage.FlexDatesInterstitialPage(self, self.browser, self.config)
        self.current_page.verifyCorrectPage()

    def select_flex_dates_interstitial(self):
        #TODO: Figure out how this should happen
        flexair.select_correct_cell(self, self.current_page)
        self.browser.wait_for_page_to_load(self.config.max_wait)

    def verify_flex_weekends_interstitial(self):
        self.browser.wait_for_text('Select dates')
        self.current_page = flexWeekendsInterstitialPage.FlexWeekendsInterstitialPage(self, self.browser, self.config)
        self.current_page.verifyCorrectPage()

    def select_flex_weekends_interstitial(self):
        flexair.select_correct_cell(self, self.current_page)
        self.browser.wait_for_page_to_load(self.config.max_wait)
