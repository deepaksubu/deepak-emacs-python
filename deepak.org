* Tasks
** DONE Understand how selenium RC is normally called
   CLOSED: [2012-07-27 Fri 10:41]
***   First get a selenium rc instance
***   Give the instance a url to work with
      self.selenium = selenium("localhost", 4444, "*firefox",
      "http://www.google.com/")
      self.selenium.start()
** DONE Understand how selenium RC is called in voltage
   CLOSED: [2012-07-27 Fri 10:41]
***   The test written by the QA calls the browser class
***   The browser class inherits from both the selenium browser class and the flow class
***   The selenium browser class is responsible for creating the browser instance and then starting it
      This is done by using the following code in browser from line 57 by calling the init method of 
      selenium class.
      Then the start method is called which is basically a rewrite of the start method in selenium.
      from line 81 or so.
      This passes some arguments to the get_string function which is responsible for getting the session id
      of the browser session which is initialized
      result = self.get_string("getNewBrowserSession", args)
      This will get the session id and then pass it on to the sessionid field of the selenium instance
      
      This is the part which needs to be changed
***   The flow class supplies the URL and related params to the browser session which is opened by selenium
** DONE Understand how selenium webdriver is normally called
   CLOSED: [2012-07-27 Fri 10:41]
*** Option 1
   # Create a new instance of the Firefox driver
   driver = webdriver.Firefox()


   # go to the google home page
   driver.get("http://www.google.com")
   
   However, another way of doing is using the selenium backed web driver
*** Option 2
    driver = RemoteWebDriver(desired_capabilities = DesiredCapabilities.FIREFOX)
    selenium = DefaultSelenium('localhost', 4444', '*webdriver', 'http://www.google.com')
    selenium.start(driver = driver)
    This does not work anymore. This has to be rewritten as
    driver = webdriver.Remote(desired_capabilities = DesiredCapabilities.FIREFOX)
    selenium = selenium.selenium('localhost', 4444', '*webdriver', 'http://www.google.com')
    selenium.start(driver = driver)
    


** DONE Understand how selenium webdriver should be called in voltage
   CLOSED: [2012-07-31 Tue 11:44]
***  Option 2 seems to be a better way of doing the porting. However in the case of this, the problem is that it may need a selenium server. I am gonna try this today
     In order to achieve this, first need to make the changes in only one place
     Where the browser class inherits from the selenium browser class. Change this so that it will use web driver and see how it goes.
     First do not run the selenium server

     
     The first change has to be done in the __init__ method of browser class
     1) If you want to use web driver, then pass the browser argument as "*webdriver" when
	the super __init__ is called at line 57
     2) Then in the start method, add an additional item to the list "args" as follows
        driver  = Remote(desired_capabilities = webdriver.DesiredCapabilities.FIREFOX)
        id = driver.desired_capabilities['webdriver.remote.sessionid']
        args.append('webdriver.remote.sessionid=%s' % id)
	Remember that we cannot do the prescribed method directly since the start method of selenium has been rewritten in voltage
	apparently to add network traffic tracking capability
     That should do it!!	
	
	
** DONE Understand how get_page works in voltage and then 
   CLOSED: [2012-07-30 Mon 16:44]

   There is sadly no get_page function in voltage

** DONE Create a webdriver decorator for tests
   CLOSED: [2012-08-01 Wed 13:01]
*** DONE Create a normal decorator
    CLOSED: [2012-07-31 Tue 11:44]
    This is done. A decorator is a means to modify a function without making changes in the function itself. 
    Execute some code before and after the function.
*** DONE Revert all changes to code except the web driver code
    CLOSED: [2012-07-31 Tue 11:47] 
*** DONE Put these in a decorator function
    CLOSED: [2012-07-31 Tue 16:45]

    This cannot be done without making changes to the existing voltage code
    There are some local variables which are present in the functions which are creating the browser session. In order to access these variables, we will need to either modify the current functions 
    or create new function*
    
    Conclsion:This does not seem to be a good idea. There is a lot of internal variables which voltage and selenium uses.
    In order to add webdriver support, we will need to edit these variables and hence its not directly possible
    decorators.
    Better use alternate function which does this.
** DONE Use the web driver in an existing test
    CLOSED: [2012-07-31 Tue 16:45]
    Used it for the carRental tests in userapp and I am getting the errors for two main things
    namely 
** DONE 1)Issue:  click is not working for hidden elements
     CLOSED: [2012-08-01 Wed 11:01]
     Currently, one of the tests is facing the issue that the element which is being used for the testing is using an invisible element to interact with. 
     Issue: The test is giving an exception for element not found.

     Root Cause: The element referred to is hidden in the test page under execution. Used firebug 
     to do the debugging.
     Selenium Web Driver needs the element to be visible for the test to go through.
     Selenium RC did not enforce this constraint.
     
     Solution: There are two alternatives
     1) Rewrite the test which is actually the correct solution since a user wont be able to click a hidden element
	Surround the code with a try catch block.

     2) In case, this is a roadblocker then use some kind of javascript injection to make the 
	element visible for that particular moment. This is ugly and is not the write way to do the testing logically.
	This will be explored only if the above method is not pushed through.
     

** DONE 2) Issue: screenshot is not working
   CLOSED: [2012-08-01 Wed 17:35]
     Unable to take screenshot
     1. Issue: Capture screenshot is not well supported in the remote webdriver for python.
     
     2. Solutions: 
	1) There is a different method for taking screenshot. Use this to take the screenshot
	   for voltage.The main problem here will be that the current screenshot method returns the image as a base64
	   encoded string.However, the remote web driver returns the image as png.
	2) There is also another way by using the remote.webdriver module which has the get_screenshot_as_base64
	   function which can be used as a replacement
	 
       The second method seems more better as of now. This can be done today.

** DONE Analysis: browser start function has a new argument added.
   CLOSED: [2012-08-01 Wed 17:35]
    + With the new issue coming to light as to when start is being used by a test
    + independently of being called from the __init__ constructor, 
    + Hence, need to evaluate as to how to implement the web driver so that 
      tests can be ported by doing one just one change.
      
    + Both of the above functionalities do not seem to be working currently for web driver.   
** TODO [#C] Analyse how the tests are called in voltage and how to add the existing functionalities from remote control to web driver
   
** DONE [#A] Setup meeting requests with the QA team for the web driver voltage demo
   CLOSED: [2012-08-01 Wed 18:11]
** DONE [#A] Do one more round of testing for web driver and see if there is anything missing
   CLOSED: [2012-08-03 Fri 14:07]
** TODO [#B] Analysis of the amount of changes that need to be done to start using the webdriver api
   In order to run chrome, the chromedriver has to be downloaded and installed.
   http://code.google.com/p/selenium/wiki/ChromeDriver
   
   For firefox, if you run a lot of threads each opening a browser, it can lead to an exception
   as this is a property of the webdriver API
   
   The click portion seems to be working now
** DONE [#A] List of things to ask the QA before and after the QA
   CLOSED: [2012-08-03 Fri 14:07]
   TBD
** DONE [#A] Do a brief presentation of the benefits of Web Driver as opposed to Selenium RC
   CLOSED: [2012-08-03 Fri 14:07]
   No need
** TODO Plan the demo
   1) Demonstrate the normal selenium RC test
   2) Demonstrate the webdriver support for firefox
   3) Discuss the shortcomings of webdriver as used by us
      1 Cannot use a lot of threads for firefox - 4 on my machine
      2 Cannot use chrome without using chrome driver . This is still a work in progress
      3 Need to run selenium server still :(
      3 have not tested for internet explorer
      4 current tests may not work

   

    
